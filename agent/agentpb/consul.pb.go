// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: consul.proto

package agentpb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// DummyTypeDontUse is here as a quick hack to work around a bug in the Binary
// marshaller plugin which will generate an empty Go file for this proto file
// which then fails to compile. We only want the service def in here but this is
// a quick way to work around until we can fix the binary marshaller plugin.
// That's a yak I can't shave right now.
type DummyTypeDontUse struct {
	Nope                 bool     `protobuf:"varint,1,opt,name=Nope,proto3" json:"Nope,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DummyTypeDontUse) Reset()         { *m = DummyTypeDontUse{} }
func (m *DummyTypeDontUse) String() string { return proto.CompactTextString(m) }
func (*DummyTypeDontUse) ProtoMessage()    {}
func (*DummyTypeDontUse) Descriptor() ([]byte, []int) {
	return fileDescriptor_665b1cce082a77c9, []int{0}
}
func (m *DummyTypeDontUse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DummyTypeDontUse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DummyTypeDontUse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DummyTypeDontUse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DummyTypeDontUse.Merge(m, src)
}
func (m *DummyTypeDontUse) XXX_Size() int {
	return m.Size()
}
func (m *DummyTypeDontUse) XXX_DiscardUnknown() {
	xxx_messageInfo_DummyTypeDontUse.DiscardUnknown(m)
}

var xxx_messageInfo_DummyTypeDontUse proto.InternalMessageInfo

func (m *DummyTypeDontUse) GetNope() bool {
	if m != nil {
		return m.Nope
	}
	return false
}

func init() {
	proto.RegisterType((*DummyTypeDontUse)(nil), "agentpb.DummyTypeDontUse")
}

func init() { proto.RegisterFile("consul.proto", fileDescriptor_665b1cce082a77c9) }

var fileDescriptor_665b1cce082a77c9 = []byte{
	// 163 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x49, 0xce, 0xcf, 0x2b,
	0x2e, 0xcd, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4f, 0x4c, 0x4f, 0xcd, 0x2b, 0x29,
	0x48, 0x92, 0xe2, 0x2f, 0x2e, 0x4d, 0x2a, 0x4e, 0x2e, 0xca, 0x4c, 0x4a, 0x85, 0xc8, 0x28, 0xa9,
	0x71, 0x09, 0xb8, 0x94, 0xe6, 0xe6, 0x56, 0x86, 0x54, 0x16, 0xa4, 0xba, 0xe4, 0xe7, 0x95, 0x84,
	0x16, 0xa7, 0x0a, 0x09, 0x71, 0xb1, 0xf8, 0xe5, 0x17, 0xa4, 0x4a, 0x30, 0x2a, 0x30, 0x6a, 0x70,
	0x04, 0x81, 0xd9, 0x46, 0x2e, 0x5c, 0x6c, 0xce, 0x60, 0x13, 0x85, 0xac, 0xb8, 0x38, 0x83, 0x61,
	0x86, 0x08, 0x49, 0xea, 0x41, 0x4d, 0xd6, 0x83, 0x8b, 0x05, 0xa5, 0x16, 0x96, 0xa6, 0x16, 0x97,
	0x48, 0xf1, 0xc1, 0xa5, 0x5c, 0xcb, 0x52, 0xf3, 0x4a, 0x94, 0x18, 0x0c, 0x18, 0x9d, 0x04, 0x4e,
	0x3c, 0x92, 0x63, 0xbc, 0xf0, 0x48, 0x8e, 0xf1, 0xc1, 0x23, 0x39, 0xc6, 0x19, 0x8f, 0xe5, 0x18,
	0x92, 0xd8, 0xc0, 0xce, 0x30, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x56, 0x3e, 0x01, 0x5f, 0xb0,
	0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ConsulClient is the client API for Consul service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ConsulClient interface {
	// Susbscribe is a generic event streaming mechanism used for efficiently
	// requesting a specific result snapshot and then following updates that
	// affect that snapshot.
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (Consul_SubscribeClient, error)
}

type consulClient struct {
	cc *grpc.ClientConn
}

func NewConsulClient(cc *grpc.ClientConn) ConsulClient {
	return &consulClient{cc}
}

func (c *consulClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (Consul_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Consul_serviceDesc.Streams[0], "/agentpb.Consul/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &consulSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Consul_SubscribeClient interface {
	Recv() (*Event, error)
	grpc.ClientStream
}

type consulSubscribeClient struct {
	grpc.ClientStream
}

func (x *consulSubscribeClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ConsulServer is the server API for Consul service.
type ConsulServer interface {
	// Susbscribe is a generic event streaming mechanism used for efficiently
	// requesting a specific result snapshot and then following updates that
	// affect that snapshot.
	Subscribe(*SubscribeRequest, Consul_SubscribeServer) error
}

func RegisterConsulServer(s *grpc.Server, srv ConsulServer) {
	s.RegisterService(&_Consul_serviceDesc, srv)
}

func _Consul_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConsulServer).Subscribe(m, &consulSubscribeServer{stream})
}

type Consul_SubscribeServer interface {
	Send(*Event) error
	grpc.ServerStream
}

type consulSubscribeServer struct {
	grpc.ServerStream
}

func (x *consulSubscribeServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

var _Consul_serviceDesc = grpc.ServiceDesc{
	ServiceName: "agentpb.Consul",
	HandlerType: (*ConsulServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _Consul_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "consul.proto",
}

func (m *DummyTypeDontUse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DummyTypeDontUse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Nope {
		dAtA[i] = 0x8
		i++
		if m.Nope {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintConsul(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *DummyTypeDontUse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Nope {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovConsul(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozConsul(x uint64) (n int) {
	return sovConsul(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DummyTypeDontUse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConsul
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DummyTypeDontUse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DummyTypeDontUse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nope", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Nope = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipConsul(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConsul
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthConsul
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipConsul(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowConsul
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConsul
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConsul
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthConsul
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthConsul
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowConsul
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipConsul(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthConsul
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthConsul = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowConsul   = fmt.Errorf("proto: integer overflow")
)
