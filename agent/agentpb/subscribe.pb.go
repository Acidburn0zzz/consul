// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: subscribe.proto

package agentpb

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Topic enumerates the supported streaming topics in Consul.
type Topic int32

const (
	Topic_ServiceHealth        Topic = 0
	Topic_ServiceHealthConnect Topic = 1
	Topic_ACLTokens            Topic = 2
	Topic_ACLPolicies          Topic = 3
	Topic_ACLRoles             Topic = 4
)

var Topic_name = map[int32]string{
	0: "ServiceHealth",
	1: "ServiceHealthConnect",
	2: "ACLTokens",
	3: "ACLPolicies",
	4: "ACLRoles",
}

var Topic_value = map[string]int32{
	"ServiceHealth":        0,
	"ServiceHealthConnect": 1,
	"ACLTokens":            2,
	"ACLPolicies":          3,
	"ACLRoles":             4,
}

func (x Topic) String() string {
	return proto.EnumName(Topic_name, int32(x))
}

func (Topic) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_38d2980c9543da44, []int{0}
}

type CatalogOp int32

const (
	CatalogOp_Register   CatalogOp = 0
	CatalogOp_Deregister CatalogOp = 1
)

var CatalogOp_name = map[int32]string{
	0: "Register",
	1: "Deregister",
}

var CatalogOp_value = map[string]int32{
	"Register":   0,
	"Deregister": 1,
}

func (x CatalogOp) String() string {
	return proto.EnumName(CatalogOp_name, int32(x))
}

func (CatalogOp) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_38d2980c9543da44, []int{1}
}

type ACLOp int32

const (
	ACLOp_Update ACLOp = 0
	ACLOp_Delete ACLOp = 1
)

var ACLOp_name = map[int32]string{
	0: "Update",
	1: "Delete",
}

var ACLOp_value = map[string]int32{
	"Update": 0,
	"Delete": 1,
}

func (x ACLOp) String() string {
	return proto.EnumName(ACLOp_name, int32(x))
}

func (ACLOp) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_38d2980c9543da44, []int{2}
}

type ACLResource int32

const (
	ACLResource_ServiceACL ACLResource = 0
	ACLResource_NodeACL    ACLResource = 1
)

var ACLResource_name = map[int32]string{
	0: "ServiceACL",
	1: "NodeACL",
}

var ACLResource_value = map[string]int32{
	"ServiceACL": 0,
	"NodeACL":    1,
}

func (x ACLResource) String() string {
	return proto.EnumName(ACLResource_name, int32(x))
}

func (ACLResource) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_38d2980c9543da44, []int{3}
}

// SubscribeRequest is the type used to initiate a streaming Subscribe RPC.
type SubscribeRequest struct {
	// Topic identifies the set of events the subscriber is interested in.
	Topic Topic `protobuf:"varint,1,opt,name=Topic,proto3,enum=agentpb.Topic" json:"Topic,omitempty"`
	// Key is a topic-specific identifier that restricts the scope of the
	// subscription to only events pertaining to that identifier. For example
	// for watching the instances of a single service, the service's name is
	// specified as the key. An empty key indicates that all events in the topic
	// are of interest.
	Key string `protobuf:"bytes,2,opt,name=Key,proto3" json:"Key,omitempty"`
	// Token is the ACL token to authenticate the request. The token must have
	// sufficient priviledges to read the requested information otherwise events
	// will be filtered, possibly resulting in an empty snapshot and no further
	// updates sent.
	Token string `protobuf:"bytes,3,opt,name=Token,proto3" json:"Token,omitempty"`
	// Index is the raft index the subscriber has already observed up to. This
	// is zero on an initial streaming call, but then can be provided by a
	// client on subsequent reconnections such that the full snapshot doesn't
	// need to be resent if the client is up to date.
	Index uint64 `protobuf:"varint,4,opt,name=Index,proto3" json:"Index,omitempty"`
	// Filter optionally specified a bexpr filter string to apply to the event
	// objects before returning them. This is an optimization only and the
	// server MAY NOT filter the results. In general it may not be possible for
	// the server to correctly apply filters without keeping a history of every
	// object sent on the subscription which would be prohibitively costly. So
	// in general servers DO NOT filter streaming updates and rely on the client
	// to apply the filter before returning to the user. The server MAY use this
	// as a hint when shipping the initial snapshot of the result to reduce data
	// sent unnecessarily over the wire. Currently for health endpoint the
	// server ignores this entirely but we may change that later.
	Filter string `protobuf:"bytes,5,opt,name=Filter,proto3" json:"Filter,omitempty"`
	// Datacenter specifies the Consul datacenter the request is targetted at.
	// If it's not the local DC (or empty) the server will forward the stream to
	// the remote DC and proxy the results back.
	Datacenter string `protobuf:"bytes,6,opt,name=Datacenter,proto3" json:"Datacenter,omitempty"`
}

func (m *SubscribeRequest) Reset()         { *m = SubscribeRequest{} }
func (m *SubscribeRequest) String() string { return proto.CompactTextString(m) }
func (*SubscribeRequest) ProtoMessage()    {}
func (*SubscribeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_38d2980c9543da44, []int{0}
}
func (m *SubscribeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubscribeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubscribeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubscribeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeRequest.Merge(m, src)
}
func (m *SubscribeRequest) XXX_Size() int {
	return m.Size()
}
func (m *SubscribeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeRequest proto.InternalMessageInfo

// Event describes a streaming update on a subscription. Events are used both to
// describe the current "snapshot" of the result as well as ongoing mutations to
// that snapshot.
type Event struct {
	// Topic the event was published to
	Topic Topic `protobuf:"varint,1,opt,name=Topic,proto3,enum=agentpb.Topic" json:"Topic,omitempty"`
	// Key is the logical identifier for the entity that was mutated.
	Key string `protobuf:"bytes,2,opt,name=Key,proto3" json:"Key,omitempty"`
	// Index is the raft index at which the mutation took place. At the top
	// level of a subscription there will always be at most one Event per index.
	// If multiple events are published to the same topic in a single raft
	// transaction then the batch of events will be encoded inside a single
	// top-level event to ensure they are delivered atomically to clients.
	Index uint64 `protobuf:"varint,3,opt,name=Index,proto3" json:"Index,omitempty"`
	// Payload is the actual event content.
	//
	// Types that are valid to be assigned to Payload:
	//	*Event_ServiceHealth
	//	*Event_ACLToken
	//	*Event_ACLPolicy
	//	*Event_ACLRole
	//	*Event_EndOfSnapshot
	//	*Event_ResumeStream
	//	*Event_ResetStream
	//	*Event_EventBatch
	Payload isEvent_Payload `protobuf_oneof:"Payload"`
}

func (m *Event) Reset()         { *m = Event{} }
func (m *Event) String() string { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()    {}
func (*Event) Descriptor() ([]byte, []int) {
	return fileDescriptor_38d2980c9543da44, []int{1}
}
func (m *Event) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Event.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Event) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event.Merge(m, src)
}
func (m *Event) XXX_Size() int {
	return m.Size()
}
func (m *Event) XXX_DiscardUnknown() {
	xxx_messageInfo_Event.DiscardUnknown(m)
}

var xxx_messageInfo_Event proto.InternalMessageInfo

type isEvent_Payload interface {
	isEvent_Payload()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Event_ServiceHealth struct {
	ServiceHealth *ServiceHealthUpdate `protobuf:"bytes,5,opt,name=ServiceHealth,proto3,oneof"`
}
type Event_ACLToken struct {
	ACLToken *ACLTokenUpdate `protobuf:"bytes,6,opt,name=ACLToken,proto3,oneof"`
}
type Event_ACLPolicy struct {
	ACLPolicy *ACLPolicyUpdate `protobuf:"bytes,7,opt,name=ACLPolicy,proto3,oneof"`
}
type Event_ACLRole struct {
	ACLRole *ACLRoleUpdate `protobuf:"bytes,8,opt,name=ACLRole,proto3,oneof"`
}
type Event_EndOfSnapshot struct {
	EndOfSnapshot bool `protobuf:"varint,9,opt,name=EndOfSnapshot,proto3,oneof"`
}
type Event_ResumeStream struct {
	ResumeStream bool `protobuf:"varint,10,opt,name=ResumeStream,proto3,oneof"`
}
type Event_ResetStream struct {
	ResetStream bool `protobuf:"varint,11,opt,name=ResetStream,proto3,oneof"`
}
type Event_EventBatch struct {
	EventBatch *EventBatch `protobuf:"bytes,12,opt,name=EventBatch,proto3,oneof"`
}

func (*Event_ServiceHealth) isEvent_Payload() {}
func (*Event_ACLToken) isEvent_Payload()      {}
func (*Event_ACLPolicy) isEvent_Payload()     {}
func (*Event_ACLRole) isEvent_Payload()       {}
func (*Event_EndOfSnapshot) isEvent_Payload() {}
func (*Event_ResumeStream) isEvent_Payload()  {}
func (*Event_ResetStream) isEvent_Payload()   {}
func (*Event_EventBatch) isEvent_Payload()    {}

func (m *Event) GetPayload() isEvent_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *Event) GetServiceHealth() *ServiceHealthUpdate {
	if x, ok := m.GetPayload().(*Event_ServiceHealth); ok {
		return x.ServiceHealth
	}
	return nil
}

func (m *Event) GetACLToken() *ACLTokenUpdate {
	if x, ok := m.GetPayload().(*Event_ACLToken); ok {
		return x.ACLToken
	}
	return nil
}

func (m *Event) GetACLPolicy() *ACLPolicyUpdate {
	if x, ok := m.GetPayload().(*Event_ACLPolicy); ok {
		return x.ACLPolicy
	}
	return nil
}

func (m *Event) GetACLRole() *ACLRoleUpdate {
	if x, ok := m.GetPayload().(*Event_ACLRole); ok {
		return x.ACLRole
	}
	return nil
}

func (m *Event) GetEndOfSnapshot() bool {
	if x, ok := m.GetPayload().(*Event_EndOfSnapshot); ok {
		return x.EndOfSnapshot
	}
	return false
}

func (m *Event) GetResumeStream() bool {
	if x, ok := m.GetPayload().(*Event_ResumeStream); ok {
		return x.ResumeStream
	}
	return false
}

func (m *Event) GetResetStream() bool {
	if x, ok := m.GetPayload().(*Event_ResetStream); ok {
		return x.ResetStream
	}
	return false
}

func (m *Event) GetEventBatch() *EventBatch {
	if x, ok := m.GetPayload().(*Event_EventBatch); ok {
		return x.EventBatch
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Event) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Event_OneofMarshaler, _Event_OneofUnmarshaler, _Event_OneofSizer, []interface{}{
		(*Event_ServiceHealth)(nil),
		(*Event_ACLToken)(nil),
		(*Event_ACLPolicy)(nil),
		(*Event_ACLRole)(nil),
		(*Event_EndOfSnapshot)(nil),
		(*Event_ResumeStream)(nil),
		(*Event_ResetStream)(nil),
		(*Event_EventBatch)(nil),
	}
}

func _Event_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Event)
	// Payload
	switch x := m.Payload.(type) {
	case *Event_ServiceHealth:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ServiceHealth); err != nil {
			return err
		}
	case *Event_ACLToken:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ACLToken); err != nil {
			return err
		}
	case *Event_ACLPolicy:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ACLPolicy); err != nil {
			return err
		}
	case *Event_ACLRole:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ACLRole); err != nil {
			return err
		}
	case *Event_EndOfSnapshot:
		t := uint64(0)
		if x.EndOfSnapshot {
			t = 1
		}
		_ = b.EncodeVarint(9<<3 | proto.WireVarint)
		_ = b.EncodeVarint(t)
	case *Event_ResumeStream:
		t := uint64(0)
		if x.ResumeStream {
			t = 1
		}
		_ = b.EncodeVarint(10<<3 | proto.WireVarint)
		_ = b.EncodeVarint(t)
	case *Event_ResetStream:
		t := uint64(0)
		if x.ResetStream {
			t = 1
		}
		_ = b.EncodeVarint(11<<3 | proto.WireVarint)
		_ = b.EncodeVarint(t)
	case *Event_EventBatch:
		_ = b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EventBatch); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Event.Payload has unexpected type %T", x)
	}
	return nil
}

func _Event_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Event)
	switch tag {
	case 5: // Payload.ServiceHealth
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ServiceHealthUpdate)
		err := b.DecodeMessage(msg)
		m.Payload = &Event_ServiceHealth{msg}
		return true, err
	case 6: // Payload.ACLToken
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ACLTokenUpdate)
		err := b.DecodeMessage(msg)
		m.Payload = &Event_ACLToken{msg}
		return true, err
	case 7: // Payload.ACLPolicy
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ACLPolicyUpdate)
		err := b.DecodeMessage(msg)
		m.Payload = &Event_ACLPolicy{msg}
		return true, err
	case 8: // Payload.ACLRole
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ACLRoleUpdate)
		err := b.DecodeMessage(msg)
		m.Payload = &Event_ACLRole{msg}
		return true, err
	case 9: // Payload.EndOfSnapshot
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Payload = &Event_EndOfSnapshot{x != 0}
		return true, err
	case 10: // Payload.ResumeStream
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Payload = &Event_ResumeStream{x != 0}
		return true, err
	case 11: // Payload.ResetStream
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Payload = &Event_ResetStream{x != 0}
		return true, err
	case 12: // Payload.EventBatch
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(EventBatch)
		err := b.DecodeMessage(msg)
		m.Payload = &Event_EventBatch{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Event_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Event)
	// Payload
	switch x := m.Payload.(type) {
	case *Event_ServiceHealth:
		s := proto.Size(x.ServiceHealth)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_ACLToken:
		s := proto.Size(x.ACLToken)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_ACLPolicy:
		s := proto.Size(x.ACLPolicy)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_ACLRole:
		s := proto.Size(x.ACLRole)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_EndOfSnapshot:
		n += 1 // tag and wire
		n += 1
	case *Event_ResumeStream:
		n += 1 // tag and wire
		n += 1
	case *Event_ResetStream:
		n += 1 // tag and wire
		n += 1
	case *Event_EventBatch:
		s := proto.Size(x.EventBatch)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type EventBatch struct {
	Events []*Event `protobuf:"bytes,1,rep,name=Events,proto3" json:"Events,omitempty"`
}

func (m *EventBatch) Reset()         { *m = EventBatch{} }
func (m *EventBatch) String() string { return proto.CompactTextString(m) }
func (*EventBatch) ProtoMessage()    {}
func (*EventBatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_38d2980c9543da44, []int{2}
}
func (m *EventBatch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventBatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventBatch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventBatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventBatch.Merge(m, src)
}
func (m *EventBatch) XXX_Size() int {
	return m.Size()
}
func (m *EventBatch) XXX_DiscardUnknown() {
	xxx_messageInfo_EventBatch.DiscardUnknown(m)
}

var xxx_messageInfo_EventBatch proto.InternalMessageInfo

type ServiceHealthUpdate struct {
	Op               CatalogOp         `protobuf:"varint,1,opt,name=Op,proto3,enum=agentpb.CatalogOp" json:"Op,omitempty"`
	CheckServiceNode *CheckServiceNode `protobuf:"bytes,2,opt,name=CheckServiceNode,proto3" json:"CheckServiceNode,omitempty"`
}

func (m *ServiceHealthUpdate) Reset()         { *m = ServiceHealthUpdate{} }
func (m *ServiceHealthUpdate) String() string { return proto.CompactTextString(m) }
func (*ServiceHealthUpdate) ProtoMessage()    {}
func (*ServiceHealthUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_38d2980c9543da44, []int{3}
}
func (m *ServiceHealthUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceHealthUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServiceHealthUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServiceHealthUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceHealthUpdate.Merge(m, src)
}
func (m *ServiceHealthUpdate) XXX_Size() int {
	return m.Size()
}
func (m *ServiceHealthUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceHealthUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceHealthUpdate proto.InternalMessageInfo

type ACLTokenUpdate struct {
	Op    ACLOp               `protobuf:"varint,1,opt,name=Op,proto3,enum=agentpb.ACLOp" json:"Op,omitempty"`
	Token *ACLTokenIdentifier `protobuf:"bytes,2,opt,name=Token,proto3" json:"Token,omitempty"`
}

func (m *ACLTokenUpdate) Reset()         { *m = ACLTokenUpdate{} }
func (m *ACLTokenUpdate) String() string { return proto.CompactTextString(m) }
func (*ACLTokenUpdate) ProtoMessage()    {}
func (*ACLTokenUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_38d2980c9543da44, []int{4}
}
func (m *ACLTokenUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ACLTokenUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ACLTokenUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ACLTokenUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ACLTokenUpdate.Merge(m, src)
}
func (m *ACLTokenUpdate) XXX_Size() int {
	return m.Size()
}
func (m *ACLTokenUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_ACLTokenUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_ACLTokenUpdate proto.InternalMessageInfo

type ACLTokenIdentifier struct {
	// This is the UUID used for tracking and management purposes
	AccessorID string `protobuf:"bytes,1,opt,name=AccessorID,proto3" json:"AccessorID,omitempty"`
	// This is the UUID used as the api token by clients. We shouldn't need this
	// just to identify tokens internally and hopefully can remove it soon but
	// there is still currently a short period after a 1.4.0+ server is upgraded
	// from pre 1.4.0 where legacy tokens may not have accessors yet.
	SecretID string `protobuf:"bytes,2,opt,name=SecretID,proto3" json:"SecretID,omitempty"`
}

func (m *ACLTokenIdentifier) Reset()         { *m = ACLTokenIdentifier{} }
func (m *ACLTokenIdentifier) String() string { return proto.CompactTextString(m) }
func (*ACLTokenIdentifier) ProtoMessage()    {}
func (*ACLTokenIdentifier) Descriptor() ([]byte, []int) {
	return fileDescriptor_38d2980c9543da44, []int{5}
}
func (m *ACLTokenIdentifier) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ACLTokenIdentifier) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ACLTokenIdentifier.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ACLTokenIdentifier) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ACLTokenIdentifier.Merge(m, src)
}
func (m *ACLTokenIdentifier) XXX_Size() int {
	return m.Size()
}
func (m *ACLTokenIdentifier) XXX_DiscardUnknown() {
	xxx_messageInfo_ACLTokenIdentifier.DiscardUnknown(m)
}

var xxx_messageInfo_ACLTokenIdentifier proto.InternalMessageInfo

type ACLPolicyUpdate struct {
	Op       ACLOp  `protobuf:"varint,1,opt,name=Op,proto3,enum=agentpb.ACLOp" json:"Op,omitempty"`
	PolicyID string `protobuf:"bytes,2,opt,name=PolicyID,proto3" json:"PolicyID,omitempty"`
}

func (m *ACLPolicyUpdate) Reset()         { *m = ACLPolicyUpdate{} }
func (m *ACLPolicyUpdate) String() string { return proto.CompactTextString(m) }
func (*ACLPolicyUpdate) ProtoMessage()    {}
func (*ACLPolicyUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_38d2980c9543da44, []int{6}
}
func (m *ACLPolicyUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ACLPolicyUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ACLPolicyUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ACLPolicyUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ACLPolicyUpdate.Merge(m, src)
}
func (m *ACLPolicyUpdate) XXX_Size() int {
	return m.Size()
}
func (m *ACLPolicyUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_ACLPolicyUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_ACLPolicyUpdate proto.InternalMessageInfo

type ACLRoleUpdate struct {
	Op     ACLOp  `protobuf:"varint,1,opt,name=Op,proto3,enum=agentpb.ACLOp" json:"Op,omitempty"`
	RoleID string `protobuf:"bytes,2,opt,name=RoleID,proto3" json:"RoleID,omitempty"`
}

func (m *ACLRoleUpdate) Reset()         { *m = ACLRoleUpdate{} }
func (m *ACLRoleUpdate) String() string { return proto.CompactTextString(m) }
func (*ACLRoleUpdate) ProtoMessage()    {}
func (*ACLRoleUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_38d2980c9543da44, []int{7}
}
func (m *ACLRoleUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ACLRoleUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ACLRoleUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ACLRoleUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ACLRoleUpdate.Merge(m, src)
}
func (m *ACLRoleUpdate) XXX_Size() int {
	return m.Size()
}
func (m *ACLRoleUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_ACLRoleUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_ACLRoleUpdate proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("agentpb.Topic", Topic_name, Topic_value)
	proto.RegisterEnum("agentpb.CatalogOp", CatalogOp_name, CatalogOp_value)
	proto.RegisterEnum("agentpb.ACLOp", ACLOp_name, ACLOp_value)
	proto.RegisterEnum("agentpb.ACLResource", ACLResource_name, ACLResource_value)
	proto.RegisterType((*SubscribeRequest)(nil), "agentpb.SubscribeRequest")
	proto.RegisterType((*Event)(nil), "agentpb.Event")
	proto.RegisterType((*EventBatch)(nil), "agentpb.EventBatch")
	proto.RegisterType((*ServiceHealthUpdate)(nil), "agentpb.ServiceHealthUpdate")
	proto.RegisterType((*ACLTokenUpdate)(nil), "agentpb.ACLTokenUpdate")
	proto.RegisterType((*ACLTokenIdentifier)(nil), "agentpb.ACLTokenIdentifier")
	proto.RegisterType((*ACLPolicyUpdate)(nil), "agentpb.ACLPolicyUpdate")
	proto.RegisterType((*ACLRoleUpdate)(nil), "agentpb.ACLRoleUpdate")
}

func init() { proto.RegisterFile("subscribe.proto", fileDescriptor_38d2980c9543da44) }

var fileDescriptor_38d2980c9543da44 = []byte{
	// 724 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0xcf, 0x6e, 0xd3, 0x4c,
	0x10, 0xf7, 0x26, 0xcd, 0xbf, 0x49, 0x93, 0xfa, 0xdb, 0x56, 0xfd, 0xfc, 0xe5, 0x43, 0x26, 0xb2,
	0xaa, 0x2a, 0xe4, 0x50, 0x44, 0xa0, 0x12, 0xd7, 0x34, 0x29, 0x34, 0x22, 0x90, 0x6a, 0x03, 0x0f,
	0xe0, 0x38, 0xd3, 0xc4, 0x6a, 0x6a, 0x1b, 0xef, 0xa6, 0xa2, 0x37, 0x1e, 0x81, 0x23, 0x4f, 0xc1,
	0x73, 0xf4, 0xd8, 0x23, 0x47, 0x68, 0x5e, 0x81, 0x07, 0x40, 0xbb, 0x76, 0x1c, 0xa7, 0x45, 0xea,
	0x81, 0xdb, 0xce, 0xef, 0xcf, 0xcc, 0xac, 0x77, 0xc6, 0xb0, 0xc5, 0xe7, 0x23, 0xee, 0x84, 0xee,
	0x08, 0x0f, 0x82, 0xd0, 0x17, 0x3e, 0x2d, 0xd8, 0x13, 0xf4, 0x44, 0x30, 0xaa, 0x55, 0xb8, 0x08,
	0xe7, 0x8e, 0xe0, 0x11, 0x5e, 0xdb, 0x99, 0xf8, 0x13, 0x5f, 0x1d, 0x9f, 0xca, 0x53, 0x84, 0x5a,
	0xdf, 0x08, 0xe8, 0xc3, 0x65, 0x06, 0x86, 0x1f, 0xe7, 0xc8, 0x05, 0xdd, 0x83, 0xdc, 0x7b, 0x3f,
	0x70, 0x1d, 0x83, 0xd4, 0x49, 0xa3, 0xda, 0xaa, 0x1e, 0xc4, 0x29, 0x0f, 0x14, 0xca, 0x22, 0x92,
	0xea, 0x90, 0x7d, 0x83, 0x57, 0x46, 0xa6, 0x4e, 0x1a, 0x25, 0x26, 0x8f, 0x74, 0x47, 0xfa, 0xce,
	0xd1, 0x33, 0xb2, 0x0a, 0x8b, 0x02, 0x89, 0xf6, 0xbc, 0x31, 0x7e, 0x32, 0x36, 0xea, 0xa4, 0xb1,
	0xc1, 0xa2, 0x80, 0xee, 0x42, 0xfe, 0x95, 0x3b, 0x13, 0x18, 0x1a, 0x39, 0x25, 0x8e, 0x23, 0x6a,
	0x02, 0x74, 0x6d, 0x61, 0x3b, 0xe8, 0x49, 0x2e, 0xaf, 0xb8, 0x14, 0x62, 0xfd, 0xca, 0x42, 0xee,
	0xf8, 0x12, 0xbd, 0xbf, 0xea, 0x32, 0xea, 0x27, 0x9b, 0xee, 0xa7, 0x0b, 0x95, 0x21, 0x86, 0x97,
	0xae, 0x83, 0x27, 0x68, 0xcf, 0xc4, 0x54, 0xb5, 0x55, 0x6e, 0x3d, 0x4a, 0xb2, 0xae, 0xb1, 0x1f,
	0x82, 0xb1, 0x2d, 0xf0, 0x44, 0x63, 0xeb, 0x26, 0x7a, 0x08, 0xc5, 0x76, 0xa7, 0x1f, 0x7d, 0x84,
	0xbc, 0x4a, 0xf0, 0x6f, 0x92, 0x60, 0x49, 0x24, 0xde, 0x44, 0x4a, 0x5f, 0x42, 0xa9, 0xdd, 0xe9,
	0x9f, 0xfa, 0x33, 0xd7, 0xb9, 0x32, 0x0a, 0xca, 0x67, 0xa4, 0x7d, 0x11, 0x93, 0x18, 0x57, 0x62,
	0xda, 0x82, 0x42, 0xbb, 0xd3, 0x67, 0xfe, 0x0c, 0x8d, 0xa2, 0xf2, 0xed, 0xa6, 0x7d, 0x12, 0x4f,
	0x5c, 0x4b, 0x21, 0xdd, 0x87, 0xca, 0xb1, 0x37, 0x1e, 0x9c, 0x0d, 0x3d, 0x3b, 0xe0, 0x53, 0x5f,
	0x18, 0xa5, 0x3a, 0x69, 0x14, 0xe5, 0x65, 0xd6, 0x60, 0xba, 0x07, 0x9b, 0x0c, 0xf9, 0xfc, 0x02,
	0x87, 0x22, 0x44, 0xfb, 0xc2, 0x80, 0x58, 0xb6, 0x86, 0x52, 0x0b, 0xca, 0x0c, 0x39, 0x8a, 0x58,
	0x54, 0x8e, 0x45, 0x69, 0x90, 0x1e, 0x02, 0xa8, 0x37, 0x3b, 0xb2, 0x85, 0x33, 0x35, 0x36, 0x55,
	0xa3, 0xdb, 0x49, 0xa3, 0x2b, 0xea, 0x44, 0x63, 0x29, 0xe1, 0x51, 0x09, 0x0a, 0xa7, 0xf6, 0xd5,
	0xcc, 0xb7, 0xc7, 0xd6, 0x8b, 0x74, 0x06, 0xba, 0x0f, 0x79, 0x15, 0x71, 0x83, 0xd4, 0xb3, 0x8d,
	0x72, 0xea, 0xed, 0x15, 0xcc, 0x62, 0xd6, 0xfa, 0x4c, 0x60, 0xfb, 0x0f, 0xef, 0x46, 0x2d, 0xc8,
	0x0c, 0x82, 0x78, 0x6e, 0x68, 0xe2, 0xed, 0xd8, 0xc2, 0x9e, 0xf9, 0x93, 0x41, 0xc0, 0x32, 0x83,
	0x80, 0x1e, 0x83, 0xde, 0x99, 0xa2, 0x73, 0x1e, 0xfb, 0xdf, 0xf9, 0x63, 0x54, 0x53, 0x54, 0x6e,
	0xfd, 0xb7, 0x72, 0xdc, 0x11, 0xb0, 0x7b, 0x16, 0xcb, 0x81, 0xea, 0xfa, 0xc3, 0x53, 0x33, 0x55,
	0xbc, 0x9a, 0x7e, 0xad, 0xb8, 0xf0, 0xb3, 0xe5, 0x16, 0x45, 0xd5, 0xfe, 0xbf, 0x37, 0x40, 0xbd,
	0x31, 0x7a, 0xc2, 0x3d, 0x73, 0x31, 0x8c, 0x57, 0xcc, 0x3a, 0x05, 0x7a, 0x9f, 0x94, 0xab, 0xd4,
	0x76, 0x1c, 0xe4, 0xdc, 0x0f, 0x7b, 0x5d, 0x55, 0xb0, 0xc4, 0x52, 0x08, 0xad, 0x41, 0x71, 0x88,
	0x4e, 0x88, 0xa2, 0xd7, 0x8d, 0xf7, 0x23, 0x89, 0xad, 0xb7, 0xb0, 0x75, 0x67, 0xee, 0x1e, 0xec,
	0xbb, 0x06, 0xc5, 0x48, 0xbf, 0x4a, 0xb7, 0x8c, 0xad, 0xd7, 0x50, 0x59, 0x1b, 0xc7, 0x07, 0x93,
	0xed, 0x42, 0x5e, 0xaa, 0x93, 0x54, 0x71, 0xd4, 0x1c, 0xc5, 0x4b, 0x4f, 0xff, 0xb9, 0xb3, 0xaf,
	0xba, 0x46, 0x0d, 0xd8, 0x59, 0x83, 0x3a, 0xbe, 0xe7, 0xa1, 0x23, 0x74, 0x42, 0x2b, 0x6a, 0xbf,
	0xd4, 0xf7, 0xe1, 0x7a, 0x86, 0x6e, 0x41, 0x79, 0x79, 0x39, 0x17, 0xb9, 0x9e, 0xa5, 0x9b, 0x6a,
	0x6d, 0x65, 0x09, 0xae, 0x6f, 0x34, 0x9f, 0x40, 0x29, 0x19, 0x05, 0x49, 0x31, 0x9c, 0xb8, 0x5c,
	0x60, 0xa8, 0x6b, 0xb4, 0x0a, 0xd0, 0xc5, 0x70, 0x19, 0x93, 0xe6, 0x63, 0xc8, 0xa9, 0x9e, 0x29,
	0x40, 0x3e, 0xba, 0x99, 0xae, 0xc9, 0x73, 0x17, 0x67, 0x28, 0x50, 0x27, 0xcd, 0xa6, 0x2a, 0xc5,
	0x90, 0xfb, 0xf3, 0xd0, 0x41, 0xe9, 0x8f, 0x5b, 0x6c, 0x77, 0xfa, 0xba, 0x46, 0xcb, 0x50, 0x90,
	0x53, 0x22, 0x03, 0x72, 0x54, 0xbf, 0xfe, 0x69, 0x6a, 0xd7, 0xb7, 0x26, 0xb9, 0xb9, 0x35, 0xc9,
	0x8f, 0x5b, 0x93, 0x7c, 0x59, 0x98, 0xda, 0xd7, 0x85, 0xa9, 0xdd, 0x2c, 0x4c, 0xed, 0xfb, 0xc2,
	0xd4, 0x46, 0x79, 0xf5, 0xd3, 0x7e, 0xfe, 0x3b, 0x00, 0x00, 0xff, 0xff, 0xab, 0x38, 0xb6, 0xa1,
	0xf5, 0x05, 0x00, 0x00,
}

func (m *SubscribeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubscribeRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Topic != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSubscribe(dAtA, i, uint64(m.Topic))
	}
	if len(m.Key) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSubscribe(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if len(m.Token) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSubscribe(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	if m.Index != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSubscribe(dAtA, i, uint64(m.Index))
	}
	if len(m.Filter) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSubscribe(dAtA, i, uint64(len(m.Filter)))
		i += copy(dAtA[i:], m.Filter)
	}
	if len(m.Datacenter) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintSubscribe(dAtA, i, uint64(len(m.Datacenter)))
		i += copy(dAtA[i:], m.Datacenter)
	}
	return i, nil
}

func (m *Event) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Event) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Topic != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSubscribe(dAtA, i, uint64(m.Topic))
	}
	if len(m.Key) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSubscribe(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if m.Index != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSubscribe(dAtA, i, uint64(m.Index))
	}
	if m.Payload != nil {
		nn1, err := m.Payload.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	return i, nil
}

func (m *Event_ServiceHealth) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ServiceHealth != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSubscribe(dAtA, i, uint64(m.ServiceHealth.Size()))
		n2, err := m.ServiceHealth.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}
func (m *Event_ACLToken) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ACLToken != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintSubscribe(dAtA, i, uint64(m.ACLToken.Size()))
		n3, err := m.ACLToken.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func (m *Event_ACLPolicy) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ACLPolicy != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintSubscribe(dAtA, i, uint64(m.ACLPolicy.Size()))
		n4, err := m.ACLPolicy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func (m *Event_ACLRole) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ACLRole != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintSubscribe(dAtA, i, uint64(m.ACLRole.Size()))
		n5, err := m.ACLRole.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}
func (m *Event_EndOfSnapshot) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x48
	i++
	if m.EndOfSnapshot {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}
func (m *Event_ResumeStream) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x50
	i++
	if m.ResumeStream {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}
func (m *Event_ResetStream) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x58
	i++
	if m.ResetStream {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}
func (m *Event_EventBatch) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.EventBatch != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintSubscribe(dAtA, i, uint64(m.EventBatch.Size()))
		n6, err := m.EventBatch.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}
func (m *EventBatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventBatch) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, msg := range m.Events {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSubscribe(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ServiceHealthUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceHealthUpdate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Op != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSubscribe(dAtA, i, uint64(m.Op))
	}
	if m.CheckServiceNode != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSubscribe(dAtA, i, uint64(m.CheckServiceNode.Size()))
		n7, err := m.CheckServiceNode.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}

func (m *ACLTokenUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ACLTokenUpdate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Op != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSubscribe(dAtA, i, uint64(m.Op))
	}
	if m.Token != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSubscribe(dAtA, i, uint64(m.Token.Size()))
		n8, err := m.Token.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}

func (m *ACLTokenIdentifier) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ACLTokenIdentifier) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AccessorID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSubscribe(dAtA, i, uint64(len(m.AccessorID)))
		i += copy(dAtA[i:], m.AccessorID)
	}
	if len(m.SecretID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSubscribe(dAtA, i, uint64(len(m.SecretID)))
		i += copy(dAtA[i:], m.SecretID)
	}
	return i, nil
}

func (m *ACLPolicyUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ACLPolicyUpdate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Op != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSubscribe(dAtA, i, uint64(m.Op))
	}
	if len(m.PolicyID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSubscribe(dAtA, i, uint64(len(m.PolicyID)))
		i += copy(dAtA[i:], m.PolicyID)
	}
	return i, nil
}

func (m *ACLRoleUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ACLRoleUpdate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Op != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSubscribe(dAtA, i, uint64(m.Op))
	}
	if len(m.RoleID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSubscribe(dAtA, i, uint64(len(m.RoleID)))
		i += copy(dAtA[i:], m.RoleID)
	}
	return i, nil
}

func encodeVarintSubscribe(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *SubscribeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Topic != 0 {
		n += 1 + sovSubscribe(uint64(m.Topic))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovSubscribe(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovSubscribe(uint64(l))
	}
	if m.Index != 0 {
		n += 1 + sovSubscribe(uint64(m.Index))
	}
	l = len(m.Filter)
	if l > 0 {
		n += 1 + l + sovSubscribe(uint64(l))
	}
	l = len(m.Datacenter)
	if l > 0 {
		n += 1 + l + sovSubscribe(uint64(l))
	}
	return n
}

func (m *Event) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Topic != 0 {
		n += 1 + sovSubscribe(uint64(m.Topic))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovSubscribe(uint64(l))
	}
	if m.Index != 0 {
		n += 1 + sovSubscribe(uint64(m.Index))
	}
	if m.Payload != nil {
		n += m.Payload.Size()
	}
	return n
}

func (m *Event_ServiceHealth) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ServiceHealth != nil {
		l = m.ServiceHealth.Size()
		n += 1 + l + sovSubscribe(uint64(l))
	}
	return n
}
func (m *Event_ACLToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ACLToken != nil {
		l = m.ACLToken.Size()
		n += 1 + l + sovSubscribe(uint64(l))
	}
	return n
}
func (m *Event_ACLPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ACLPolicy != nil {
		l = m.ACLPolicy.Size()
		n += 1 + l + sovSubscribe(uint64(l))
	}
	return n
}
func (m *Event_ACLRole) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ACLRole != nil {
		l = m.ACLRole.Size()
		n += 1 + l + sovSubscribe(uint64(l))
	}
	return n
}
func (m *Event_EndOfSnapshot) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *Event_ResumeStream) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *Event_ResetStream) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *Event_EventBatch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EventBatch != nil {
		l = m.EventBatch.Size()
		n += 1 + l + sovSubscribe(uint64(l))
	}
	return n
}
func (m *EventBatch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovSubscribe(uint64(l))
		}
	}
	return n
}

func (m *ServiceHealthUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Op != 0 {
		n += 1 + sovSubscribe(uint64(m.Op))
	}
	if m.CheckServiceNode != nil {
		l = m.CheckServiceNode.Size()
		n += 1 + l + sovSubscribe(uint64(l))
	}
	return n
}

func (m *ACLTokenUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Op != 0 {
		n += 1 + sovSubscribe(uint64(m.Op))
	}
	if m.Token != nil {
		l = m.Token.Size()
		n += 1 + l + sovSubscribe(uint64(l))
	}
	return n
}

func (m *ACLTokenIdentifier) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AccessorID)
	if l > 0 {
		n += 1 + l + sovSubscribe(uint64(l))
	}
	l = len(m.SecretID)
	if l > 0 {
		n += 1 + l + sovSubscribe(uint64(l))
	}
	return n
}

func (m *ACLPolicyUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Op != 0 {
		n += 1 + sovSubscribe(uint64(m.Op))
	}
	l = len(m.PolicyID)
	if l > 0 {
		n += 1 + l + sovSubscribe(uint64(l))
	}
	return n
}

func (m *ACLRoleUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Op != 0 {
		n += 1 + sovSubscribe(uint64(m.Op))
	}
	l = len(m.RoleID)
	if l > 0 {
		n += 1 + l + sovSubscribe(uint64(l))
	}
	return n
}

func sovSubscribe(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSubscribe(x uint64) (n int) {
	return sovSubscribe(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SubscribeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSubscribe
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubscribeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubscribeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topic", wireType)
			}
			m.Topic = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscribe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Topic |= Topic(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscribe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubscribe
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubscribe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscribe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubscribe
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubscribe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscribe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscribe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubscribe
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubscribe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Filter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Datacenter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscribe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubscribe
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubscribe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Datacenter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSubscribe(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSubscribe
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSubscribe
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Event) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSubscribe
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Event: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Event: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topic", wireType)
			}
			m.Topic = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscribe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Topic |= Topic(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscribe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubscribe
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubscribe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscribe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceHealth", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscribe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSubscribe
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSubscribe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ServiceHealthUpdate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &Event_ServiceHealth{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ACLToken", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscribe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSubscribe
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSubscribe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ACLTokenUpdate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &Event_ACLToken{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ACLPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscribe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSubscribe
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSubscribe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ACLPolicyUpdate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &Event_ACLPolicy{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ACLRole", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscribe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSubscribe
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSubscribe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ACLRoleUpdate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &Event_ACLRole{v}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndOfSnapshot", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscribe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Payload = &Event_EndOfSnapshot{b}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResumeStream", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscribe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Payload = &Event_ResumeStream{b}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResetStream", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscribe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Payload = &Event_ResetStream{b}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventBatch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscribe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSubscribe
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSubscribe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EventBatch{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &Event_EventBatch{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSubscribe(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSubscribe
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSubscribe
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventBatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSubscribe
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventBatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventBatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscribe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSubscribe
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSubscribe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &Event{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSubscribe(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSubscribe
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSubscribe
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceHealthUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSubscribe
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceHealthUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceHealthUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Op", wireType)
			}
			m.Op = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscribe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Op |= CatalogOp(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckServiceNode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscribe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSubscribe
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSubscribe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CheckServiceNode == nil {
				m.CheckServiceNode = &CheckServiceNode{}
			}
			if err := m.CheckServiceNode.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSubscribe(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSubscribe
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSubscribe
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ACLTokenUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSubscribe
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ACLTokenUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ACLTokenUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Op", wireType)
			}
			m.Op = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscribe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Op |= ACLOp(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscribe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSubscribe
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSubscribe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Token == nil {
				m.Token = &ACLTokenIdentifier{}
			}
			if err := m.Token.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSubscribe(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSubscribe
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSubscribe
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ACLTokenIdentifier) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSubscribe
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ACLTokenIdentifier: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ACLTokenIdentifier: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessorID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscribe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubscribe
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubscribe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessorID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecretID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscribe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubscribe
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubscribe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecretID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSubscribe(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSubscribe
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSubscribe
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ACLPolicyUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSubscribe
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ACLPolicyUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ACLPolicyUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Op", wireType)
			}
			m.Op = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscribe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Op |= ACLOp(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscribe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubscribe
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubscribe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PolicyID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSubscribe(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSubscribe
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSubscribe
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ACLRoleUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSubscribe
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ACLRoleUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ACLRoleUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Op", wireType)
			}
			m.Op = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscribe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Op |= ACLOp(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscribe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubscribe
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubscribe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSubscribe(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSubscribe
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSubscribe
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSubscribe(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSubscribe
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSubscribe
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSubscribe
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSubscribe
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthSubscribe
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSubscribe
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSubscribe(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthSubscribe
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSubscribe = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSubscribe   = fmt.Errorf("proto: integer overflow")
)
